// <auto-generated />
using DbLocator.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbLocator.Migrations
{
    [DbContext(typeof(DbLocatorContext))]
    [Migration("20250416135002_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbLocator.Db.ConnectionEntity", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConnectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectionId"));

                    b.Property<int>("DatabaseId")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseID");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("TenantID");

                    b.HasKey("ConnectionId")
                        .HasName("PK_Connection");

                    b.HasIndex("DatabaseId");

                    b.HasIndex("TenantId");

                    b.ToTable("Connection", (string)null);
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseEntity", b =>
                {
                    b.Property<int>("DatabaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DatabaseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseId"));

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DatabaseServerId")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseServerID");

                    b.Property<byte>("DatabaseStatusId")
                        .HasColumnType("tinyint")
                        .HasColumnName("DatabaseStatusID");

                    b.Property<byte>("DatabaseTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("DatabaseTypeID");

                    b.Property<bool>("UseTrustedConnection")
                        .HasColumnType("bit")
                        .HasColumnName("UseTrustedConnection");

                    b.HasKey("DatabaseId")
                        .HasName("PK_Database");

                    b.HasIndex(new[] { "DatabaseServerId" }, "IX_Database_DatabaseServerID");

                    b.HasIndex(new[] { "DatabaseTypeId" }, "IX_Database_DatabaseTypeID");

                    b.ToTable("Database", (string)null);
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseRoleEntity", b =>
                {
                    b.Property<int>("DatabaseRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DatabaseRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseRoleId"));

                    b.Property<string>("DatabaseRoleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DatabaseRoleId")
                        .HasName("PK_DatabaseRole");

                    b.ToTable("DatabaseRole", (string)null);

                    b.HasData(
                        new
                        {
                            DatabaseRoleId = 1,
                            DatabaseRoleName = "Owner"
                        },
                        new
                        {
                            DatabaseRoleId = 2,
                            DatabaseRoleName = "SecurityAdmin"
                        },
                        new
                        {
                            DatabaseRoleId = 3,
                            DatabaseRoleName = "AccessAdmin"
                        },
                        new
                        {
                            DatabaseRoleId = 4,
                            DatabaseRoleName = "BackupOperator"
                        },
                        new
                        {
                            DatabaseRoleId = 5,
                            DatabaseRoleName = "DdlAdmin"
                        },
                        new
                        {
                            DatabaseRoleId = 6,
                            DatabaseRoleName = "DataWriter"
                        },
                        new
                        {
                            DatabaseRoleId = 7,
                            DatabaseRoleName = "DataReader"
                        },
                        new
                        {
                            DatabaseRoleId = 8,
                            DatabaseRoleName = "DenyDataWriter"
                        },
                        new
                        {
                            DatabaseRoleId = 9,
                            DatabaseRoleName = "DenyDataReader"
                        });
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseServerEntity", b =>
                {
                    b.Property<int>("DatabaseServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DatabaseServerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseServerId"));

                    b.Property<string>("DatabaseServerFullyQualifiedDomainName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DatabaseServerHostName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DatabaseServerIpaddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DatabaseServerIPAddress");

                    b.Property<string>("DatabaseServerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsLinkedServer")
                        .HasColumnType("bit");

                    b.HasKey("DatabaseServerId")
                        .HasName("PK_DatabaseServer");

                    b.ToTable("DatabaseServer", (string)null);
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseTypeEntity", b =>
                {
                    b.Property<byte>("DatabaseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("DatabaseTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("DatabaseTypeId"));

                    b.Property<string>("DatabaseTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("DatabaseTypeId")
                        .HasName("PK_DatabaseType");

                    b.ToTable("DatabaseType", (string)null);
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseUserDatabaseEntity", b =>
                {
                    b.Property<int>("DatabaseUserDatabaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseUserDatabaseId"));

                    b.Property<int>("DatabaseId")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseID");

                    b.Property<int>("DatabaseUserId")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseUserID");

                    b.HasKey("DatabaseUserDatabaseId");

                    b.HasIndex("DatabaseId");

                    b.HasIndex("DatabaseUserId");

                    b.ToTable("DatabaseUserDatabase", (string)null);
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseUserEntity", b =>
                {
                    b.Property<int>("DatabaseUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DatabaseUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseUserId"));

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DatabaseUserId")
                        .HasName("PK_DatabaseUser");

                    b.ToTable("DatabaseUser", (string)null);
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseUserRoleEntity", b =>
                {
                    b.Property<int>("DatabaseUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseUserRoleId"));

                    b.Property<int>("DatabaseRoleId")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseRoleID");

                    b.Property<int>("DatabaseUserId")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseUserID");

                    b.HasKey("DatabaseUserRoleId")
                        .HasName("PK_DatabaseUserRole");

                    b.HasIndex("DatabaseUserId");

                    b.HasIndex(new[] { "DatabaseRoleId" }, "IX_DatabaseUserRole_DatabaseRoleID");

                    b.ToTable("DatabaseUserRole", (string)null);
                });

            modelBuilder.Entity("DbLocator.Db.TenantEntity", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenantId"));

                    b.Property<string>("TenantCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("TenantStatusId")
                        .HasColumnType("tinyint")
                        .HasColumnName("TenantStatusID");

                    b.HasKey("TenantId")
                        .HasName("PK_Tenant");

                    b.ToTable("Tenant", (string)null);
                });

            modelBuilder.Entity("DbLocator.Db.ConnectionEntity", b =>
                {
                    b.HasOne("DbLocator.Db.DatabaseEntity", "Database")
                        .WithMany("Connections")
                        .HasForeignKey("DatabaseId")
                        .IsRequired()
                        .HasConstraintName("FK_Connection_Database");

                    b.HasOne("DbLocator.Db.TenantEntity", "Tenant")
                        .WithMany("Connections")
                        .HasForeignKey("TenantId")
                        .IsRequired()
                        .HasConstraintName("FK_Connection_Tenant");

                    b.Navigation("Database");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseEntity", b =>
                {
                    b.HasOne("DbLocator.Db.DatabaseServerEntity", "DatabaseServer")
                        .WithMany("Databases")
                        .HasForeignKey("DatabaseServerId")
                        .IsRequired()
                        .HasConstraintName("FK_Database_DatabaseServer");

                    b.HasOne("DbLocator.Db.DatabaseTypeEntity", "DatabaseType")
                        .WithMany("Databases")
                        .HasForeignKey("DatabaseTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Database_DatabaseType");

                    b.Navigation("DatabaseServer");

                    b.Navigation("DatabaseType");
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseUserDatabaseEntity", b =>
                {
                    b.HasOne("DbLocator.Db.DatabaseEntity", "Database")
                        .WithMany("Users")
                        .HasForeignKey("DatabaseId")
                        .IsRequired()
                        .HasConstraintName("FK_DatabaseUserDatabase_Database");

                    b.HasOne("DbLocator.Db.DatabaseUserEntity", "User")
                        .WithMany("Databases")
                        .HasForeignKey("DatabaseUserId")
                        .IsRequired()
                        .HasConstraintName("FK_DatabaseUserDatabase_DatabaseUser");

                    b.Navigation("Database");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseUserRoleEntity", b =>
                {
                    b.HasOne("DbLocator.Db.DatabaseRoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("DatabaseRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_DatabaseUserRole_DatabaseRole");

                    b.HasOne("DbLocator.Db.DatabaseUserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("DatabaseUserId")
                        .IsRequired()
                        .HasConstraintName("FK_DatabaseUserRole_DatabaseUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseEntity", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseRoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseServerEntity", b =>
                {
                    b.Navigation("Databases");
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseTypeEntity", b =>
                {
                    b.Navigation("Databases");
                });

            modelBuilder.Entity("DbLocator.Db.DatabaseUserEntity", b =>
                {
                    b.Navigation("Databases");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DbLocator.Db.TenantEntity", b =>
                {
                    b.Navigation("Connections");
                });
#pragma warning restore 612, 618
        }
    }
}
